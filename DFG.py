__author__ = 'clementacole75@gmail.com'
#!/usr/bin/python
import sys
import csv
import json
import os.path
import struct
import re
import os
import glob
import errno
import itertools


sys.dont_write_bytecode = True
from bisect import bisect_right

#Commands for executing graphviz api to render DFG pixels.
#Please don't use Tpng options it sucks.
#instead use Tps option.
#So far Block 101, 2, were generated successfully
#Still needs some bugs fixing
#Notes !!
#	   !!
#	   \/
#      ---\  Issue #1  ==> bug fixed for regular expression
#	   ---/  Issue #2  ==> graphviz api takes longer than normal to generate .ps,
#			 Issue #3  ==> Render quality of .png files are very low
#			 Issue #4  ==> The following micro operators_X86 should be completed by next week
#						  ==>  {add, addi, mul, multi,  }
#			 Issue #5  ==> Creat_shell() function does not work properly, be advised manually execute dot command in Graphs directory
#			 Issue #6  ==> Big one combining all blocks to form the giant DFG
#			 ;Test ==> blocks.py = passed
#			 ;Blocks_recursive_generator = passed
# 			 ;*.dot_file_generator implementation passed
#			 ;Executing all *.dot files with os.system("dot -Tps *.dot -o "${filename}") = failed
#			 ;Bug within graph.write("%s -> %s"%(op, instruction[i]))
#			 ;No issues with node decorator.
#			 ;Test subject = fftX86_output
#sfdp -x Tpng data.dot > data.png
#neato -x Tpng data.dot > data.png
#sfdp -x -Goverlap = scale -Tpng test1.dot > test1.png

#Exceptions file, this would be the list of micro_ops not been implemented
input_path = 'Blocks/*'    #Hard import from the read_blocks.py module
files = glob.glob(input_path)	#Hard import from the read_blocks.py module


found_ops = open('found.md', 'a')
not_found_ops = open('not_found.md', 'a')
test_output = open('current_dictionary.md', 'a')
no_dfg = open('operators_with_no_dfg.txt', 'a')
dest_node_file = open('DNF.txt', 'a')
instructions_file = open("line.txt", 'a')
dest_nodes = []  #list of destination nodes
dest_node_labels = [] #list of destination node labels
temp_reg_file = open("temp_registers", 'a')
#output_path = "/Graphs/"
#if os.path.exists(output_path):
#	os.removedirs(output_path)
#else:
#	os.makedirs(output_path)

#graph = open('test1.dot', 'a')

#Algorithm for connecting the individual nodes for each instruction:
#If any input_node is in list_of_dest_nodes:
#	replace input_node with the node from list_of_dest_nodes
#	store new_dest_node into list_of_dest_nodes
#Else:
#	create new input_node with node_from instruction
# 	store new_dest_node into list_of_dest_nodes
def initializer_graph(graph):
	file_initializer(graph, graph)
	graph.write('digraph test{\n')
	graph.write('\tsize = "4,4";\n')

def finalizer_graph(graph):
	graph.write('}')

def grapher(instruction, line_number, graph):

	while '' in instruction:
		instruction.remove('')
	counter = 0
	op = instruction[0]
	op_shape = "box"

	reg_shape = "circle"
	if (op == 'add'):
		graph.write("%s [label = %s, shape = %s];\n" %(line_number, op, op_shape))
		for reg in instruction[1:]:
			graph.write("%s [label = %s, shape = %s];\n" %(line_number, reg, reg_shape))
			line_number = line_number + 1
			graph.write("%s [label = %s, shape = %s];\n" %(line_number, reg, reg_shape))


def process_instruction(instruction):
	micro = instruction.split(',')	#Split, might not be necessary
	ops = micro[0]		#Generate the operators string
	regs = micro[1:]	#Generate slice from instructions
	register_list = []	#register_list for generating list of registers inside list
	reg_index = 0	#
	for index in range(regs): #iterate through the slice generated by micro from the first index
		register_list[reg_index] = regs[index] #assign regs[n...]  to register_list[n+1...]
		reg_index = reg_index + 1   #increase the register's index

#def src_match(input_node, ):

def __add_dest_list__(dest_node, dest_node_label):
	dest_nodes.append(dest_node)
	dest_node_labels.append(dest_node_label)
	#for destination_nodes, destination_labels in itertools.izip(dest_nodes, dest_node_labels):
	#	print(destination_nodes, destination_labels)
	#for destination_nodes, destination_labels in itertools.izip(dest_nodes, dest_node_labels):
	#	print(destination_nodes, destination_labels)

#def __check_label__(node_label):
#	indices = []
#	idx = -1
#	while True:
#		try:
#			idx = dest_node_labels.index(node_label, idx+1)
#			indices.append(idx)
#		except ValueError:
#			break
#		return indices
def __check_label__(node_label):

	#for index, node_label in enumerate(dest_node_labels):
	if node_label in dest_node_labels:
		#i = dest_node_labels.rindex(node_label)
		i = len(dest_node_labels) - dest_node_labels[::-1].index(node_label) - 1
		return i + 1 
	else:
		return 0
	
temp_registers =[	"t0d",  "t1d",  "t2d",  "t3d",  "t4d",  "t5d", "t6d", "t7d", "t8d", "t9d",
					"t0w",  "t1w",  "t2w",  "t3w",  "t4w",  "t5w", "t6w", "t7w", "t8w", "t9w", 
				 	"t0",   "t1",   "t2",   "t3",   "t4",   "t5",  "t6",  "t7",  "t8",  "t9"
				 	"eax",  "rax" ]		
temp_reg_shape = "point"

def ADD(instruction, line_number, graph):  #Generic add operator
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "ADD"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2 = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)

	




def ADDI(instruction, line_number, graph):  #Add immediate operator
	#'addi'
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "ADDI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op   = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2  + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)

def ADC(instruction, line_number, graph): #Add with carry
	#"adc"
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "ADC"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)
	


def ADCI(instruction, line_number, graph):  #Add immediate with carry
	#adci 
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "ADCI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "circle"
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2  + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)


def   SUB(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "SUB"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)
	

def  SUBI(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "SUBI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2 = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)



def  MUL1S(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MUL1S"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)

def MUL1SI(instruction, line_number, graph):
	#'addi'
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MUL1SI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op   = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = imm  + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)


def MUL1U(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MUL1U"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)

def MUL1UI(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MUL1UI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op   = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	imm  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(imm_node, imm, imm_shape))
	if ( __check_label__(instruction[2]) != 0):
		i = __check_label__ (instruction[2]) - 1
		s1 = dest_nodes[i]
		graph.write("\%s\" -> \"%s\";\n" %(s1, dest_node))
	elif( __check_label__(instruction[2]) == 0):
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(imm_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)

def MULEL(instruction, line_number, graph):  #Dest = Dest <- ProdLo
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MULEL"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op   = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(imm_node, imm, imm_shape))
	if ( __check_label__(instruction[2]) != 0):
		i = __check_label__ (instruction[2]) - 1
		s1 = dest_nodes[i]
		graph.write("\%s\" -> \"%s\";\n" %(s1, dest_node))
	elif( __check_label__(instruction[2]) == 0): 
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(imm_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)
	

def MULEH(instruction, line_number, graph):  #Dest = Dest <- ProdHi
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MULEH"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op   = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(imm_node, imm, imm_shape))
	if ( __check_label__(instruction[2]) != 0):
		i = __check_label__ (instruction[2]) - 1
		s1 = dest_nodes[i]
		graph.write("\%s\" -> \"%s\";\n" %(s1, dest_node))
	elif( __check_label__(instruction[2]) == 0):
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(imm_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)

def DIV1(instruction, line_number, graph):
	for item in instruction:
		no_dfg.write("%s" %(item))
		no_dfg.write("\n")

def DIV1I(instruction, line_number, graph):
	for item in instruction:
		no_dfg.write("%s" %(item))
		no_dfg.write("\n")

def DIV2(instruction, line_number, graph):
	for item in instruction:
		no_dfg.write("%s" %(item))
		no_dfg.write("\n")

def DIV2I(instruction, line_number, graph):
	for item in instruction:
		no_dfg.write("%s" %(item))
		no_dfg.write("\n")

def DIVQ(instruction, line_number, graph):
	for item in instruction:
		no_dfg.write("%s" %(item))
		no_dfg.write("\n")

def DIVR(instruction, line_number, graph):
	for item in instruction:
		no_dfg.write("%s" %(item))
		no_dfg.write("\n")

def OR(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "OR"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2 = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)

def ORI(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "ORI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2 = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)


def XOR(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "XOR"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2 = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)

def MXOR(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MXOR"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2 = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)

def XORI(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "ADD"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2 = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)

def AND(instruction, line_number, graph): #logical and operator
	#and
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "AND"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)


def ANDI(instruction, line_number, graph): #Logical and immediate operator
	#'andi'
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "ANDI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = imm  + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)

## operands operators
def SLL(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "SLL"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)

def SLLI(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "SLLI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)

def SRL(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "SRL"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)


def SRLI(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "SRLI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)


def SRA(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "SRA"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)



def SRAI(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "SRAI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)



def ROR(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "ROR"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)



def RORI(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "RORI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node)) #Find a way to equate the previous node pointing to src1 in the list of destination nodes. 
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(op_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)


def RCR(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "RCR"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)


def RCRI(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "RCRI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	imm  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	imm_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(imm_node, src2, imm_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(imm_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)


def ROL(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "ROL"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
	if (__check_label__(instruction[2] != 0)):
		i = (__check_label__(instruction[2])) - 1
		s1 = dest_nodes[i]
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"]; \n" %(s1, op_node) )
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))

	if (__check_label__(instruction[3] != 0)):
		i = (__check_label__(instruction[2])) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"]; \n" %(s2, op_node) )
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)


def ROLI(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "ROLI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	imm  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	imm_node  = imm + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))

	if (__check_label__(instruction[2]) != 0):
		i = (__check_label__(instruction[2])) - 1
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\" "%(s1, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	if (__check_label__(instruction[3]) != 0):
		i = (__check_label__(instruction[3])) - 1
		immediate = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\"" %(immediate, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(imm_node, imm, imm_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(imm_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)


def RCL (instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "RCL"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	if (__check_label__(instruction[2]) != 0):
		i = __check_label__(instruction[2]) - 1
		s1 = dest_nodes[2]
		graph.write("\"%s\" -> \"%s\";\n" %(s1, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	if(__check_label__(instruction[3]) != 0):
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[3]
		graph.write("\"%s\" -> \"%s\";\n" %(s2, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)


def RCLI (instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "RCLI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	imm  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	imm_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	if (__check_label__(instruction[2]) != 0):
		i = __check_label__(instruction[2]) - 1
		s1 = dest_nodes[2]
		graph.write("\"%s\" -> \"%s\";\n" %(s1, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	if (__check_label__(instruction[3]) != 0):
		i = __check_label__(instruction[3]) - 1
		immediate = dest_nodes[3]
		graph.write("\"%s\" -> \"%s\";\n " %(immediate, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(imm_node, imm, imm_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(imm_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)

def MOV (instruction, line_number, graph):  # dest = src1 <- src2
	#mov dest, src1, src2  ==> dest = src1 <- src2 ==> merge contents of src1 and src2 and store in destination address. 
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MOV"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	if (__check_label__(instruction[2]) != 0):
		i = __check_label__(instruction[2]) - 1
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %(s1, op_node))
	else: 
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n "%(src1_node, op_node))
	if ( __check_label__(instruction[3])  != 0):
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n "%(s2, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2, op_node))
	graph.write("\"%s\"   -> \"%s\";\n" %( op_node, dest_node))
	__add_dest_list__(dest_node, dest)

def MOVSIGN(instruction, line_number, graph):
	#mov dest, src1, src2  ==> dest = src1 <- src2 ==> merge contents of src1 and src2 and store in destination address. 
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MOVSIGN"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	if (__check_label__(instruction[2]) != 0):
		i = __check_label__(instruction[2]) - 1
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %(s1, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n"%(src1_node, op_shape))
	if ( __check_label__(instruction[3]) != 0):
		i = __check_label__(instruction[3]) -1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\"" %(s2, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n "%(src2_node, op_node))
	graph.write("\"%s\"   -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)

def MCMPI2R(instruction, line_number, graph):
	#mov dest, src1, src2  ==> dest = src1 <- src2 ==> merge contents of src1 and src2 and store in destination address. 
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MCMPI2R"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	if (__check_label__(instruction[2]) != 0):
		i = __check_label__(instruction[2]) - 1
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %(s1, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n"%(src1_node, op_shape))
	if ( __check_label__(instruction[3]) != 0):
		i = __check_label__(instruction[3]) -1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\"" %(s2, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n "%(src2_node, op_node))
	graph.write("\"%s\"   -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)


def MOVI (instruction, line_number, graph): #dest = src1 <- imm
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MOVI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	imm  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	imm_node  = imm + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	if (__check_label__(instruction[2]) != 0):
		i = __check_label__(instruction[2]) - 1
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %(s1, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n"%(src1_node, op_shape))
	if ( __check_label__(instruction[3]) != 0):
		i = __check_label__(instruction[3]) -1
		immediate = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\"" %(immediate, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(imm_node, imm, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n "%(imm_node, op_node))
	graph.write("\"%s\"   -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)


def SEXT (instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "SEXT"  #Probably not useful
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	sext = "signed_extend" + "(" +src1+","+src2+")" 
	sext_label = sext_node + str(line_number)
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		#graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		#graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))	
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)

def SEXTI (instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "SEXTI"  #Probably not useful
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	imm  = instruction[3]
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	imm_node  = imm + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	if (__check_label__(instruction[2]) != 0):
		i = __check_label__(instruction[2]) - 1
		s1 = dest_nodes[i]
		graph.write("\"%s\" ->  \"%s\";\n"%(s1, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\" " %(src1_node, op_node))
	if (__check_label__(instruction[3]) != 0):
		i = __check_label__(instruction[3] - 1)
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n "%(s2, op_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(imm_node, imm, imm_shape))
		graph.write("\"%s\" -> \"%s\" " %(imm_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)

	

def ZEXT(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "ZEXT"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	zext = "zero_extend" + "(" +src1+","+src2+")"
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		#graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s2, op_node))
	else:
		#graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))	
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)


def ZEXTI(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "ZEXTI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op =   instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2  = instruction[3]
	zext = "zero_extend" + "(" +src1+","+src2+")"
	op_node   = op   + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node  = src2 + str(line_number) 
	zext_node = zext + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	if ( __check_label__(instruction[2]) != 0): #If the src1 is plotted
		i = __check_label__(instruction[2]) - 1 
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, op_node))
	else:
		#graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	if (__check_label__(instruction[3]) != 0): #If the src2 is plotted
		i = __check_label__(instruction[3]) - 1
		immediate = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( immediate, op_node))
	else:
		#graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))	
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))
	__add_dest_list__(dest_node, dest)
	
def RUFLAG(instruction, line_number, graph): #
	#Reads the user level flag stored in the bit position specified by the immediate Imm and stores it in the register Dest. 
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "RUFLAG"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op = instruction[0]
	dest = instruction[1]
	imm = instruction[2]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	imm_node = imm + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(imm_node, imm, reg_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(imm_node, dest_node))
	__add_dest_list__(dest_node, dest)

def RUFLAGS(instruction, line_number, graph): #Suspend for now
	#Read all user flags. 
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "RUFLAGS"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op = instruction[0]
	dest = instruction[1]
	imm = instruction[2]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	imm_node = imm + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(imm_node, imm, reg_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(imm_node, dest_node))
	__add_dest_list__(dest_node, dest)

def WRUFLAGS(instruction, line_number, graph):
	#Set the user level flags to the exclusive or of the Src1 and Src2 registers. 
	#user flags = SRc1 ^ SRC2
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "WRUFLAGS"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op = instruction[0]
	dest = instruction[1]
	imm = instruction[2]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	imm_node = imm + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(imm_node, imm, reg_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(imm_node, dest_node))
	__add_dest_list__(dest_node, dest)

def MOV2FP(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MOV2FP"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)

def WRUFLAGSI(instruction, line_number, graph):
	#Set the user level flags to the exclusive or of the Src1 and Imm registers. 
	#user flags = SRc1 ^ imm
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "WRUFLAGSI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	imm_shape = "plaintext"
	op = instruction[0]
	dest = instruction[1]
	imm = instruction[2]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	imm_node = imm + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(imm_node, imm, reg_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(imm_node, dest_node))
	__add_dest_list__(dest_node, dest)

def RDIP(instruction, line_number, graph):
	#Read the instruction pointer
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "RDIP"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	src2 = instruction[2]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	src2_node = src2 + str(line_number)
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
	if src2 in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
	graph.write("\"%s\" -> \"%s\"[\"dir\" = \"none\"];\n" %(src2_node, dest_node))
	__add_dest_list__(dest_node, dest)

def WRIP(instruction, line_number, graph):
	#Set the rIP to the sum of the Src1 and Src2 registers. This causes a macroop branch at the end of the current macroop. 
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "WRIP"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	src1 = instruction[1]
	src2 = instruction[2]
	op_node = op + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	add_node = "add" + str(line_number)
	rIp = "rip"
	rIP_node = rIp + str(line_number) 
	graph.write("\"%s\" [label = \"+\", shape = \"box\"];\n" %(add_node))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\", color = \"red\"];\n" %(rIP_node, rIp, reg_shape))

	if ( __check_label__(instruction[1]) != 0 ):
		i = __check_label__(instruction[1]) - 1
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\"; \n" %(s1, add_node))
	else:
		if src1 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, temp_reg_shape))
			graph.write("\"%s\" -> \"%s\";\n" %(src1_node, add_node))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
			graph.write("\"%s\" -> \"%s\";\n" %(src1_node, add_node))
	if ( __check_label__(instruction[2]) != 0 ):
		i = __check_label__(instruction[2]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\"; \n" %(s2, add_node))
	else:
		if src2 in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, temp_reg_shape))
			graph.write("\"%s\" -> \"%s\";\n" %(src2_node, add_node))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
			graph.write("\"%s\" -> \"%s\";\n" %(src2_node, add_node))
	graph.write("\"%s\" -> \"%s\";\n" %(add_node, rIP_node))
	__add_dest_list__(rIP_node, rIp)

def WRIPI(instruction, line_number, graph):
		#Set the rIP to the sum of the Src1 and Src2 registers. This causes a macroop branch at the end of the current macroop. 
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "WRIPI"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	src1 = instruction[1]
	src2 = instruction[2]
	op_node = op + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	add_node = "add" + str(line_number)
	rIp = "rip"
	rIP_node = rIp + str(line_number)
	graph.write("\"%s\" [label = \"+\", shape = \"box\"];\n" %(add_node))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\", color = \"red\"];\n" %(rIP_node, rIp, reg_shape))
	if ( __check_label__(instruction[1]) != 0 ):
		i = __check_label__(instruction[1]) - 1
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\"; \n" %(s1, add_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src1_node, add_node))
	if ( __check_label__(instruction[2]) != 0 ):
		i = __check_label__(instruction[2]) - 1
		s2 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\"; \n" %(s2, add_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(src2_node, add_node))
	graph.write("\"%s\" -> \"%s\";\n" %(add_node, rIP_node))
	__add_dest_list__(rIP_node, rIp)

def LD(instruction, line_number, graph):
	#Load
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "LD"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	if source in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\" [\"dir\" = \"none\"];\n" %(source_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)


def LDFP(instruction, line_number, graph):
	#Load floating point
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "LDFP"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	if source in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\" [\"dir\" = \"none\"];\n" %(source_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)

def LFPIMM(instruction, line_number, graph):
	#Load floating point
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "LFPIMM"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if source in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\" [\"dir\" = \"none\"];\n" %(source_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)


def LDM(instruction, line_number, graph):
	#Load multimedia register
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "LDM"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if source in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\" [\"dir\" = \"none\"];\n" %(source_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)

def LDST(instruction, line_number, graph):
	#Load with store check
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "LDST"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	graph.write("\"%s\"[label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	if source in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\" [\"dir\" = \"none\"];\n" %(source_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)

def LDSTL(instruction, line_number, graph):
	#Load with store check locked
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "LDSTL"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if source in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\" [\"dir\" = \"none\"];\n" %(source_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)


def ST(instruction, line_number, graph):
	#Read the instruction pointer
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "ST"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	source = instruction[1]
	dest = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	
	if ( __check_label__(instruction[1]) != 0 ):
		i = __check_label__(instruction[1]) - 1
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, dest_node))

	elif( __check_label__(instruction[2]) == 0):
		if source in temp_registers:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
		else:
			graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)


def STF(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "STF"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	source = instruction[1]
	dest = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if ( __check_label__(instruction[1]) != 0 ):
		i = __check_label__(instruction[1]) - 1
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, dest_node))
	elif( __check_label__(instruction[2]) == 0):
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)

def STFP(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "STFP"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	source = instruction[1]
	dest = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if ( __check_label__(instruction[1]) != 0 ):
		i = __check_label__(instruction[1]) - 1
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, dest_node))
	elif( __check_label__(instruction[2]) == 0):
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)

def STM(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "STM"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	source = instruction[1]
	dest = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if ( __check_label__(instruction[1]) != 0 ):
		i = __check_label__(instruction[1]) - 1
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, dest_node))

	elif( __check_label__(instruction[2]) == 0):
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)

def STUPD(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "STUPD"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	source = instruction[1]
	dest = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	if ( __check_label__(instruction[1]) != 0 ):
		i = __check_label__(instruction[1]) - 1
		s1 = dest_nodes[i]
		graph.write("\"%s\" -> \"%s\";\n" %( s1, dest_node))

	elif( __check_label__(instruction[2]) == 0):
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)

def LEA(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "LEA"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)

def CDA(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "CDA"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)

def CDAF(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "CDAF"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)

def CIA(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "CIA"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)

def TIA(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "TIA"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)

def LIMM(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "LIMM"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	
	if source in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, temp_reg_shape))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	if dest in temp_registers:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, temp_reg_shape))
		graph.write("\"%s\" -> \"%s\" [\"dir\" = \"none\"];\n" %(source_node, dest_node))
	else:
		graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
		graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)


def MOVFP(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MOVFP"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)

def MOV2INT(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MOV2INT"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	source = instruction[2]
	op_node = op + str(line_number)
	source_node = source + str(line_number)
	dest_node = dest + str(line_number)
	#graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(source_node, source, reg_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(source_node, dest_node))
	__add_dest_list__(dest_node, dest)


def XORFP(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "XORFP"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2 = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))	
	graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)

#def SQRTFP
def ADDFP(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "ADDFP"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2 = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))	
	graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))		
	__add_dest_list__(dest_node, dest)	

def SUBFP(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "SUBFP"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2 = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))	
	graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))		
	__add_dest_list__(dest_node, dest)	

def MULFP(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MULFP"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2 = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))	
	graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)




def DIVFP(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "DIVFP"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2 = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))	
	graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)		

def COMPFP(instruction, line_number, graph):
	for item in instruction:
		no_dfg.write("%s" %(item))
		no_dfg.write("\n")

def CVTF_I2D(instruction,line_number, graph):
	for item in instruction:
		no_dfg.write("%s" %(item))
		no_dfg.write("\n")

def CVTF_I2D_HI(instruction, line_number, graph):
	for item in instruction:
		no_dfg.write("%s" %(item))
		no_dfg.write("\n")

def CVTF_D2I(instruction, line_number, graph):
	for item in instruction:
		no_dfg.write("%s" %(item))
		no_dfg.write("\n")
def FAULT(instruction, line_number, graph):
	for item in instruction:
		no_dfg.write("%s" %(item))
		no_dfg.write("\n")

def LDDHA(instruction, line_number, graph):
	for item in instruction:
		no_dfg.write("%s" %(item))
		no_dfg.write("\n")

def LDAHA(instruction, line_number, graph):
	for item in instruction:
		no_dfg.write("%s" %(item))
		no_dfg.write("\n")


def  BR(instruction, line_number, graph):
	#br
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "BR"
	op_shape = "box"
	node = "node"
	imm_shape = "plaintext"
	op  =   instruction[0]
	imm =   instruction[1]
	op_node  = op  + str(line_number)
	imm_node = imm + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(imm_node, imm, imm_shape))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, imm_node))
	__add_dest_list__(imm_node, imm)



def MADDF(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "maddf"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2 = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))	
	graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))	
	__add_dest_list__(dest_node, dest)		




def MMULF(instruction, line_number, graph):
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	label = "MMULF"
	op_shape = "box"
	node = "node"
	reg_shape = "circle"
	op = instruction[0]
	dest = instruction[1]
	src1 = instruction[2]
	src2 = instruction[3]
	op_node = op + str(line_number)
	dest_node = dest + str(line_number)
	src1_node = src1 + str(line_number)
	src2_node = src2 + str(line_number)
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(op_node, op, op_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(dest_node, dest, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src1_node, src1, reg_shape))
	graph.write("\"%s\" [label = \"%s\", shape = \"%s\"];\n" %(src2_node, src2, reg_shape))	
	graph.write("\"%s\" -> \"%s\";\n" %(src1_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(src2_node, op_node))
	graph.write("\"%s\" -> \"%s\";\n" %(op_node, dest_node))			
	__add_dest_list__(dest_node, dest)



	
def CHECK_TEMP(instruction):  #Removed {line_number, graph}
	temp_registers =[	"t0d",  "t1d",  "t2d",  "t3d",  "t4d",  "t5d", "t6d", "t7d", "t8d", "t9d",
						"t0w",  "t1w",  "t2w",  "t3w",  "t4w",  "t5w", "t6w", "t7w", "t8w", "t9w", 
				 		"t0",   "t1",   "t2",   "t3",   "t4",   "t5",  "t6",  "t7",  "t8",  "t9" ]
	temp_set = set(temp_registers)
	while '' in instruction:
		instruction.remove('')
	counter = 0
	l = len(instruction)
	#for i, element in enumerate(instruction):
		#i will equal the index
		#elem will be the element in instruction at that index
		#etc
		#if element in
	i = 0
	try:
		while instruction[i]: #while in the list containing instruction
			if instruction[i] in temp_registers: #if the instruction with index i is a temp_register
				instruction = list(filter(lambda x: x != instruction[i], instruction)) #remove it
			i += 1
	except IndexError: 
		pass 

	#Now return the list back to the calling operation function in dictionary
	return instruction 





operatorsX86 = {	"add" 	: ADD,
					"addi" 	: ADDI,
					"adc" 	: ADC, 
					"adci"  : ADCI,
					"sub"   : SUB,
					"subi"   : SUBI,
					"mul1s"   : MUL1S,
					"mul1si"   : MUL1SI,
					"mul1u"   : MUL1U,
					"mul1ui"   : MUL1UI,
					"mulel"   : MULEL,
					"muleh"   : MULEH,
					"or"   : OR,
					"ori"   : ORI,
					"xor"   : XOR,
					"mxor"  : MXOR,
					"xori"   : XORI,
					"and"   : AND, 
					"andi"   : ANDI,
					"sll"   : SLL,
					"slli"   : SLLI,
					"srl"   : SRL,
					"srli"   : SRLI,
					"sra"   : SRA,
					"srai"   : SRAI,
					"ror"   : ROR,
					"rori"   : RORI,
					"rcri"   : RCRI,
					"rol"   : ROL,
					"roli"   : ROLI,
					"rcl"   : RCL,
					"rcli"   : RCLI,
					"mov"   : MOV,
					"movsign" : MOVSIGN,
					"mov2int" : MOV2INT,
					"mcmpi2r" : MCMPI2R,
					"movi"   : MOVI,
					"sext"   : SEXT,
					"sexti" : SEXTI,
					"zext"   : ZEXT,
					"zexti"  : ZEXTI,
					"ruflag"   : RUFLAG,
					"ruflags"   : RUFLAGS,
					"wruflags"   : WRUFLAGS,
					"wruflagsi"   : WRUFLAGSI,
					"rdip"   : RDIP,
					"wrip"   : WRIP,
					"wripi"   : WRIPI,
					"ld"   : LD,
					"ldfp"   : LDFP,
					"lfpimm" : LFPIMM,
					"ldm"   : LDM,
					"ldst"   : LDST,
					"ldstl"   : LDSTL,
					"st"   : ST,
					"stf"   : STF,
					"stfp" : STFP,
					"stm"   : STM,
					"stupd"   : STUPD, 
					"lea"   : LEA,
					"cda"   : CDA,
					"cdaf"   : CDAF,
					"cia"   : CIA,
					"tia"   : TIA,
					"limm"   : LIMM,
					"movfp"   : MOVFP,
					"mov2fp"  : MOV2FP,
					"xorfp"   : XORFP,
					"addfp"   : ADDFP, 
					"subfp"   : SUBFP,
					"mulfp"   : MULFP, 
					"divfp"   : DIVFP,
					"compfp"   : COMPFP,
					"cvtf_i2d"   : CVTF_I2D,
					"cvtf_i2d_hi"   : CVTF_I2D_HI, 
					"cvtf_"   : CVTF_D2I,
					"fault"   : FAULT, 
					"lddha"   : LDDHA,
					"ldaha"   : LDAHA,
					"br"   : BR,
					"maddf"   : MADDF,
					"mmulf"   : MMULF  }

#Used to have temp_registers here
def read_trace():
	counter = 1  #counter for each line of file
	count = 0      #{Count for each item in list more of like an index for elements}
	founds = 0
	line_list2 = []  #Personal note {don't forget to register list to prevent exceptions}
	not_founds = 0
	refined_list= []
	refined_list2 = []
	matrix = []
	pattern = "0x"
	i = 0  #Iterator for lists
	file_initializer(found_ops, not_found_ops)
	for name in files:
		try:
			graph = open(name+'.dot', 'a')
			initializer_graph(graph)
			with open(name, 'r') as f:
				text = f.readlines()
				for line in text:  #For each line the the assembly file do the following
					counter = counter + 1
					if re.match( r'(.*)0x[a-zA-Z0-9](.*?) .*', line, re.M | re.I):   #Check to see if the first two characters are 0x {more accurate}
						#graph = open(name+'.dot', a)
						line_list = line.split(":")  #Turn each line into a list of words for text processing
						#if (refined_list >)
						refined_list = line_list[3].split(" ") #get the actuall micro_expression
						first_index = line_list.index(line_list[0])
						#for item in refined_list:
						line_list = [x.strip(' ') for x in line_list]
						line_list = filter(bool, line_list)
							#refined_list= []
							#for last in line_list:  #Iterate through the last list of items which is the microop good business
							#counts = last    #assign that iterator value to counts
							#first_index = line_list.index(line_list[0])
							#last_index = line_list.index(counts)
							#refined_list = line_list[3].split(" ") #get the actuall micro_expression
					#if not re.search(r'^\W+$', item) or re.search(r'^\w+', item):
						refined_list = [x.strip(' ') for x in refined_list] # Remove strip
						refined_list = filter(bool, refined_list)  # Remove all spaces
						refined_list = [x.strip(',') for x in refined_list]  #Strip list from all commas, I hate them
						really_refined = map(str.strip, refined_list)
						i = 0
						for x in range(really_refined):
							matrix[counter][i] = really_refined[x]
							i = i + 1
						#refined_list2.append(item)
								#for index in range(len(refined_list)):  #iterate through each refined list
						if refined_list[0] in operatorsX86:
							line = str(counter)
							operatorsX86[refined_list[0]](refined_list, counter, graph)
							found_ops.write(refined_list[0] + '\n')
							instructions_file.write("instruction: %s, line_number: %s\n"  %(refined_list, line))
									#count = count + 1  #Count number of items in assembly code so ex: {lea r10, DS} will have 3 items
						else:
									#print ("operator (not found) = %s line => number = %d "%(refined_list[i], counter))
							not_found_ops.write(refined_list[0] + '\n')  #Report if operator not found into not_found.md file}
				instructions_file.write("-------------------End of %s Block-----------------------------\n" %(name))

				dest_node_labels [:] = []
				dest_nodes [:] = []
									#count = count + 1
			#print ("Number of operators in table = %d\nNumber of operators not in table = %d\n" %(founds, not_founds))
			#print ("Total number of lines in assemblyfile %d" %(counter) )
			#print ("Percentage of operators in lookup table = %f" %(percentage(founds, counter)))
			finalizer_graph(graph)
						#around here call a function to generate blocks in output directory
						#os.system('mv %s.dot Graphs/%s.dot' %(name,name))
						#another command to actually generate the pictorial graph itself
						#Done
		except IOError as exc:
			if exc.errno != errno.EISDIR:
				raise

	for i in dest_nodes:
		del i
	for i in dest_node_labels:
		del i
		
#		except IOError as exc:
#			if exc.errno != errno.EISDIR:
#				raise


def find_operator(line_list, operators):
		#return any([i in operator_list for i in line_list])
		#return not (set(line_list).disjoint(operators))
		if any([item in line_list for item in operatorsX86]):
				return 1
		else:
				return 0


def file_initializer(pfile, *pfiles):
		#with open(pfile, "w"):
				#pass
		pfile.seek(0)
		pfile.truncate()
		for index in range(len(pfiles)):
				pfiles[index].seek(0)
				pfiles[index].truncate()


def keyword_match(keyword):
		a_starts = sorted(keyword[:-1] for keyword in operatorsX86)
		pos = bisect_right(a_starts, keyword)
		matched_keyword = a_starts[pos-1]
		return matched_keyword if  keyword.startswith(matched_keyword) else None

		#for keyword in assemblyfile:
		#       print(keyword)

def percentage(part, whole):
		return 100 * float(part)/ float(whole)


def move():
	current_path = os.getcwd()
	input_path = current_path + '/Blocks/*.dot'
	output_path = current_path + '/Graphs/'
	os.system('mv %s %s' %(input_path, output_path))

def createps():
	input_path = os.getcwd()
	n = 0
	input_path = input_path + '/Graphs/*'
	dot_files = []
	for files in os.walk(input_path):
		for dot_file in files:
			file_path = ('/Graphs/%s'%(dot_files))
			os.system('dot -Tps %s -o Graphs/graph%d.ps'%(file_path, n  ))
			n += 1
	#os.system('/Blocks/*.dot  /Graphs/')

def create_shell():
	input_path = os.getcwd()
	n = 0
	input_path = input_path + '/Graphs/*'
	ps_shellscript = "gpg.sh"
	script = open(input_path+'gpg.sh', 'a')
	script.write("#!/bin/sh\n")
	script.write("for file in ./*.dot\n")
	script.write("do\n")
	script.write('\tdot -Tps "${filename}" -o "new${filename}" \n')
	script.write("done\n")

#initializer_graph()
#upload(prompt)
read_trace()
#regularexpress()
found_ops.close()
not_found_ops.close()
move()
create_shell()
#__print_dest_list__()
#finalizer_graph()
#print operators

#https://github.com/uart/gem5-mirror/tree/master/src/arch/generic
#http://www.gem5.org/X86_microop_ISA#Xor
#http://permalink.gmane.org/gmane.comp.emulators.m5.devel/4508
#https://github.com/xflr6/graphviz/blob/master/examples/notebook.ipynb
#https://docs.python.org/3.1/library/stdtypes.html#str.isspace
#http://www.cyberciti.biz/faq/python-command-line-arguments-argv-example/
#https://github.com/codypierce/pyemu/blob/master/PyCPU.py



#__author__ = 'Robert'

#from bisect import bisect_right

#file_a = """hell*
#wor*
#howard*
#are*
#yo*
#all*
#to*""".splitlines()

#file_b = """hello world how are you all today too told town""".split()

#a_starts = sorted(word[:-1] for word in file_a) #can do this easily if only 100, 000 words as you say.

#def match(word):
 #   pos = bisect_right(a_starts, word)
	#assert 0 <= pos < len(a_starts)
  #  matched_word = a_starts[pos - 1]
   # return matched_word if word.startswith(matched_word) else None

#for word in file_b:
 #   print(word, " -> ", match(word))


#hello  ->  hell
#world  ->  wor
#how  ->  None
#are  ->  are
#you  ->  yo
#all  ->  all
#today  ->  to
#too  ->  to
#told  ->  to
#town  ->  to


 #               if find_operator(refined_list, operatorsX86):
						#print refined_list[0]+"  was found in table"
 #                        op_grapher = Opgrapher(refined_list[0])
						#op_grapher.operators_x86[refined_list[0]]
 #                        elif keyword_match(line_list, counter) == None:
  #                               e.write("%s not found in table in line %d\n" %(refined_list[0], counter) )
  #                       else:
								#print("%s not found in table in line %d" %(refined_list[0], counter) )
  #                               e.write("%s not found in table in line %d\n" %(refined_list[0], counter) )
   #                              continue
#"""
#a = open (raw_file, "r") {I used for code testing not valid anymore maybe next time}
	#while True:
		#try:
			#trace_file = raw_input("Please enter the name of the trace file: ")
		#except ValueError:
			#print("Sorry, the file you entered %s doesnot exist try again" %(trace_file))
			#continue
		#else:
			#breakwhile True:

#def upload(prompt):
#    trace_file = raw_input(prompt)
#    if(os.path.exists(trace_file)):
#        read_trace(trace_file)
#    else:
#        print ("The file you entered does not exist\n")
#        print ("Press Enter to continue....\n")
#        upload(prompt)

##Ask user for input
#raw_input("Please enter the nmae of trace file within current directory: ")
#upload("Yes you got it: ")

#Playing with regular expressions seeing which one suites this design
#def regularexpress():
#	pattern = "0x"
#	trace_file = open("fftX86_output", 'r')
#	text = trace_file.readlines()
#	for line in text:
#		if re.match( r'(.*)0x[a-zA-Z0-9](.*?) .*', line, re.M | re.I):
#		print line

#import sys
#import glob
#import errno

#input_path = 'Blocks/*'
#files = glob.glob(input_path)
#for name in files:		# 'file' is a builtin type, 'name' is a less-ambiguous variable name.
#	try:
#		with open(name) as f:  # No need to specify 'r': this is the default.
#			sys.stdout.write(f.read())
#	except IOError as exc:
#		if exc.errno != errno.EISDIR: # Do not fail if a directory is found, just ignore it.
#			raise #Propagate other kinds of IOError

#Remember to generate dump file >> obj_dump -D file_name.out > dump_output

